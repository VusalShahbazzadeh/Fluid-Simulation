// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Normalize
#pragma kernel ProcessUp
#pragma kernel ProcessDown
#pragma kernel MakeBuffer

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWStructuredBuffer<double> inverse;
RWStructuredBuffer<double> matrix_buffer;
RWStructuredBuffer<double> buffer;

int num;
int column;
int range;

[numthreads(1,1,1)]
void Normalize(uint3 id : SV_DispatchThreadID)
{
    inverse[id.x + id.y * num] /= matrix_buffer[id.y + id.y * num];
}

[numthreads(1,1,1)]
void ProcessUp(uint3 id : SV_DispatchThreadID)
{
    if (matrix_buffer[column + (column - (id.y + 1)) * num] == 0)
        return;;

    float val = matrix_buffer[column + (column - (id.y + 1)) * num] / matrix_buffer[column + column * num];


    inverse[id.x + (column - (id.y + 1)) * num] -= inverse[id.x + column * num] * val;
}

[numthreads(1,1,1)]
void ProcessDown(uint3 id : SV_DispatchThreadID)
{
    if (matrix_buffer[column + (column +  id.y+ 1 ) * num] == 0)
        return;
    matrix_buffer[id.x + (column +  id.y+ 1 ) * num] -= matrix_buffer[id.x + column * num] * buffer[id.y + 1];


    inverse[id.x + (column +  id.y+ 1 ) * num] -= inverse[id.x + column * num] * buffer[ id.y+ 1 ];
}

[numthreads(1,1,1)]
void MakeBuffer(uint3 id : SV_DispatchThreadID)
{
    buffer[id.x + 1] = matrix_buffer[column + (column + id.x + 1) * num] /
        matrix_buffer[column + column * num];
}
