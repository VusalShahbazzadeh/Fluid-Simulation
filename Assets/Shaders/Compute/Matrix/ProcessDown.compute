// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWStructuredBuffer<double> matrix_buffer;
RWStructuredBuffer<double> inverse;
int num;
int column;

double Row[num * 2];
double Multiplied[num * 2];
double Result[num * 2];

void GetRow(int raw)
{
    for (int i = 0; i < num; i++)
        Row[i] = matrix_buffer[i + raw * num];

    for (int i = 0; i < num; i++)
        Row[i + num] = inverse[i + raw * num];
}

void SetRow(int row, double data[])
{
    for (int i = 0; i < num; i++)
    {
        matrix_buffer[i + row * num] = data[i];
    }

    for (int i = 0; i < num; i++)
    {
        inverse[i + row * num] = data[i + num];
    }
}

void Multiply(double raw[], double val)
{
    for (int i = 0; i < num; i++)
        Multiplied[i] = raw[i] * val;
}

void SubtractRow(int row, double data[])
{
    GetRow(row);
    for (int i = 0; i < num; i++)
    {
        Result[i] = Row[i] - data[i];
    }

    SetRow(row, Result);
}

[numthreads(1,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    auto val =matrix_buffer[column + (column + id.x) * num]; 
    if (val == 0)
        return;
    GetRow(column);
    Multiply(Row, val / matrix_buffer[column + column * num]);

    SubtractRow(column + id.x, Multiplied);
}
